<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Alfons&#39;s Blog</title>
    <link>https://alfonsxh.github.io/Blog/tags/docker/</link>
    <description>Recent content in Docker on Alfons&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://alfonsxh.github.io/Blog/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker(五) - 创建私有镜像仓库</title>
      <link>https://alfonsxh.github.io/Blog/post/docker/docker_4_%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      <guid>https://alfonsxh.github.io/Blog/post/docker/docker_4_%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;p&gt;默认情况下，我们下载镜像的位置都是 &lt;a href=&#34;https://hub.docker.com&#34;&gt;https://hub.docker.com&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;在国内，使用上面的仓库地址可能会下载得很慢，使用国内的镜像源在很大程度上会加快下载速度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker(四) - 实例: redis主从同步实现</title>
      <link>https://alfonsxh.github.io/Blog/post/docker/docker_3_redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://alfonsxh.github.io/Blog/post/docker/docker_3_redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;&#xA;&lt;p&gt;使用容器，使得一个主机和两个备机实现数据同步。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker(三) - Dockerfile 创建镜像</title>
      <link>https://alfonsxh.github.io/Blog/post/docker/docker_2_dockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://alfonsxh.github.io/Blog/post/docker/docker_2_dockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; 是一个文本格式的配置文件，用户可以通过使用 &lt;strong&gt;Dockerfile&lt;/strong&gt; 文件快速自定义需要的镜像。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; 由一行一行的命令构成，主体部分包括：&lt;strong&gt;基础镜像信息&lt;/strong&gt;、&lt;strong&gt;镜像操作指令&lt;/strong&gt;、&lt;strong&gt;容器启动时执行指令&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker(二) - Cli命令: container和image</title>
      <link>https://alfonsxh.github.io/Blog/post/docker/docker_1_container%E5%92%8Cimage%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://alfonsxh.github.io/Blog/post/docker/docker_1_container%E5%92%8Cimage%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;p&gt;主要记录一些常见的命令使用，避免遗忘。命令行操作的话，个人比较喜欢 &lt;code&gt;docker image rm xxx&lt;/code&gt; 的方式，不太喜欢直接使用精简命令的方式，例如 &lt;code&gt;docker rmi xxxx&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker(一) - 概述</title>
      <link>https://alfonsxh.github.io/Blog/post/docker/docker_0_docker%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://alfonsxh.github.io/Blog/post/docker/docker_0_docker%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h2 id=&#34;从init谈起&#34;&gt;从init谈起&lt;/h2&gt;&#xA;&lt;p&gt;Linux系统下有3个特殊的进程:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;idle进程&lt;/strong&gt;: 由 &lt;strong&gt;操作系统自动创建&lt;/strong&gt;，运行在内核态，&lt;strong&gt;pid为0&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;init进程&lt;/strong&gt;: 由 &lt;strong&gt;idle通过kernel_thread创建&lt;/strong&gt;，&lt;strong&gt;pid为1&lt;/strong&gt;，在内核空间完成初始化后，加载init程序(现在大多系统使用的是systemd程序，稍早的系统使用sysvinit或者upstart程序)，并最终在用户空间运行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;kthreadd进程&lt;/strong&gt;: 由 &lt;strong&gt;idle通过kernel_thread创建&lt;/strong&gt;，&lt;strong&gt;pid为2&lt;/strong&gt;，始终运行在内核空间，负责所有内核线程的调度和管理。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
